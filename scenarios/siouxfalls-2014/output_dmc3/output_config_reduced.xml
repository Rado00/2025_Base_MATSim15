<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE config SYSTEM "http://www.matsim.org/files/dtd/config_v2.dtd">
<config>
	<module name="DiscreteModeChoice" >
		<param name="accumulateEstimationDelays" value="true" />
		<!-- Trips tested with the modes listed here will be cached for each combination of trip and agent during one replanning pass. -->
		<param name="cachedModes" value="pt, car, walk, bike" />
		<!-- Defines whether to run a runtime check that verifies that everything is set up correctl for a 'mode-choice-in-the-loop' setup. -->
		<param name="enforceSinglePlan" value="false" />
		<!-- Defines what happens if there is no feasible choice alternative for an agent: IGNORE_AGENT, INITIAL_CHOICE, EXCEPTION -->
		<param name="fallbackBehaviour" value="EXCEPTION" />
		<!-- Defines how home activities are identified. Built-in choices: FirstActivity, ActivityBased -->
		<param name="homeFinder" value="EqasimHomeFinder" />
		<!-- Defines which ModeAvailability component to use. Built-in choices: Default, Car -->
		<param name="modeAvailability" value="Car" />
		<!-- Main model type: Trip, Tour -->
		<param name="modelType" value="Tour" />
		<!-- Defines whether the DiscreteModeChoice strategy should be followed by a rerouting of all trips. If the estimator returns alternatives with routes attached this is not necessary. -->
		<param name="performReroute" value="false" />
		<!-- Defines which Selector component to use. Built-in choices: Maximum, MultinomialLogit, Random -->
		<param name="selector" value="MultinomialLogit" />
		<!-- Defines a number of TourConstraint components that should be activated. Built-in choices: FromTripBased, VehicleContinuity, SubtourMode -->
		<param name="tourConstraints" value="FromTripBased, EqasimVehicleTourConstraint" />
		<!-- Defines which TourEstimator component to use. Built-in choices: MATSimDayScoring, Cumulative, Uniform -->
		<param name="tourEstimator" value="Cumulative" />
		<!-- Defines a number of TourFilter components that should be activated. Built-in choices: TourLength -->
		<param name="tourFilters" value="TourLengthFilter, OutsideFilter" />
		<!-- Defines which TourFinder component to use. Built-in choices: PlanBased, ActivityBased, HomeBased -->
		<param name="tourFinder" value="ActivityBased" />
		<!-- Defines a number of TripConstraint components that should be activated. Built-in choices: VehicleContinuity, ShapeFile, LinkAttribute, TransitWalk -->
		<param name="tripConstraints" value="PassengerConstraint, OutsideConstraint, TransitWalk" />
		<!-- Defines which TripEstimator component to use. Built-in choices: MATSimTripScoring, Uniform -->
		<param name="tripEstimator" value="EqasimUtilityEstimator" />
		<!-- Defines a number of TripFilter components that should be activated. Built-in choices:  -->
		<param name="tripFilters" value="" />
		<parameterset type="homeFinder:ActivityBased" >
			<!-- Comma-separated activity types which should be considered as home. -->
			<param name="activityTypes" value="home" />
		</parameterset>
		<parameterset type="modeAvailability:Car" >
			<!-- Defines which modes are avialable to the agents. -->
			<param name="availableModes" value="pt, car, walk, bike" />
		</parameterset>
		<parameterset type="modeAvailability:Default" >
			<!-- Defines which modes are avialable to the agents. -->
			<param name="availableModes" value="pt, car, walk, bike" />
		</parameterset>
		<parameterset type="selector:MultinomialLogit" >
			<!-- Defines whether candidates with a utility lower than the minimum utility should be filtered out. -->
			<param name="considerMinimumUtility" value="false" />
			<!-- Candidates with a utility above that threshold will be cut off to this value. -->
			<param name="maximumUtility" value="700.0" />
			<!-- Candidates with a utility lower than that threshold will not be considered by default. -->
			<param name="minimumUtility" value="-700.0" />
		</parameterset>
		<parameterset type="tourConstraint:SubtourMode" >
			<!-- Modes for which the sub-tour behaviour should be replicated. If all available modes are put here, this equals to SubTourModeChoice with singleLegProbability == 0.0; if only the constrained modes are put here, it equals singleLegProbability > 0.0 -->
			<param name="constrainedModes" value="" />
		</parameterset>
		<parameterset type="tourConstraint:VehicleContinuity" >
			<!-- Defines which modes must fulfill continuity constraints (can only be used where they have been brough to before) -->
			<param name="restrictedModes" value="car, bike" />
		</parameterset>
		<parameterset type="tourFilter:TourLength" >
			<!-- Defines the maximum allowed length of a tour. -->
			<param name="maximumLength" value="10" />
		</parameterset>
		<parameterset type="tourFinder:ActivityBased" >
			<!-- Comma-separated activity types which should be considered as start and end of a tour. If a plan does not start or end with such an activity additional tours are added. -->
			<param name="activityTypes" value="home" />
		</parameterset>
		<parameterset type="tripConstraint:LinkAttribute" >
			<!-- Link attribute that will be considered for feasibility of the trip. -->
			<param name="attributeName" value="null" />
			<!-- Value that the link attributes should equal. -->
			<param name="attributeValue" value="null" />
			<!-- Modes for which the constraint will be considered. -->
			<param name="constrainedModes" value="" />
			<!-- Defines the criterion on when a trip with the constrained mode will be allowed: ORIGIN, DESTINATION, BOTH, ANY, NONE -->
			<param name="requirement" value="BOTH" />
		</parameterset>
		<parameterset type="tripConstraint:ShapeFile" >
			<!-- Modes for which the shapes will be considered. -->
			<param name="constrainedModes" value="" />
			<!-- Path to a shape file, which should have the same projection as the network. -->
			<param name="path" value="null" />
			<!-- Defines the criterion on when a trip with the constrained mode will be allowed: ORIGIN, DESTINATION, BOTH, ANY, NONE -->
			<param name="requirement" value="BOTH" />
		</parameterset>
		<parameterset type="tripConstraint:VehicleContinuity" >
			<!-- Defines if the advanced constriant is used (vehicles must be brought back home). -->
			<param name="isAdvanced" value="true" />
			<!-- Defines which modes must fulfill continuity constraints (can only be used where they have been brough to before) -->
			<param name="restrictedModes" value="car, bike" />
		</parameterset>
		<parameterset type="tripEstimator:MATSimTripScoring" >
			<!-- Modes which are considered as public transit, i.e. they involve waiting for a vehicle. -->
			<param name="ptLegModes" value="pt" />
		</parameterset>
	</module>
	<module name="TimeAllocationMutator" >
		<!-- Default:1800.0; Defines how many seconds a time mutation can maximally shift a time. -->
		<param name="mutationRange" value="3600.0" />
	</module>
	<module name="controler" >
		<!-- Default=1000. Last Iteration of a simulation. -->
		<param name="lastIteration" value="2" />
		<param name="outputDirectory" value="scenarios/siouxfalls-2014/output_dmc3" />
		<!-- Possible values: failIfDirectoryExists, overwriteExistingFiles, deleteDirectoryIfExists -->
		<param name="overwriteFiles" value="deleteDirectoryIfExists" />
		<!-- iterationNumber % writeEventsInterval == 0 defines in which iterations events are written to a file. `0' disables events writing completely. -->
		<param name="writeEventsInterval" value="1000" />
		<!-- iterationNumber % writePlansInterval == 0 defines (hopefully) in which iterations plans are written to a file. `0' disables plans writing completely.  Some plans in early iterations are always written -->
		<param name="writePlansInterval" value="1000" />
	</module>
	<module name="eqasim" >
		<param name="costParametersPath" value="null" />
		<param name="crossingPenalty" value="3.0" />
		<!-- Possible values: kilometer, meter, mile, foot -->
		<param name="distanceUnit" value="meter" />
		<param name="modeParametersPath" value="null" />
		<param name="sampleSize" value="1.0" />
		<!-- Possible values: kilometer, meter, mile, foot -->
		<param name="tripAnalysisDistanceUnit" value="meter" />
		<param name="tripAnalysisInterval" value="0" />
		<param name="useScheduleBasedTransport" value="true" />
		<parameterset type="cost_model" >
			<param name="mode" value="car" />
			<param name="model" value="ZeroCostModel" />
		</parameterset>
		<parameterset type="cost_model" >
			<param name="mode" value="pt" />
			<param name="model" value="ZeroCostModel" />
		</parameterset>
		<parameterset type="estimator" >
			<param name="estimator" value="WalkUtilityEstimator" />
			<param name="mode" value="walk" />
		</parameterset>
		<parameterset type="estimator" >
			<param name="estimator" value="BikeUtilityEstimator" />
			<param name="mode" value="bike" />
		</parameterset>
		<parameterset type="estimator" >
			<param name="estimator" value="PtUtilityEstimator" />
			<param name="mode" value="pt" />
		</parameterset>
		<parameterset type="estimator" >
			<param name="estimator" value="CarUtilityEstimator" />
			<param name="mode" value="car" />
		</parameterset>
	</module>
	<module name="facilities" >
		<!-- This defines how facilities should be created. Possible values: none fromFile setInScenario onePerActivityLinkInPlansFile onePerActivityLinkInPlansFileExceptWhenCoordinatesAreGiven onePerActivityLocationInPlansFile  -->
		<param name="facilitiesSource" value="fromFile" />
		<param name="inputFacilitiesFile" value="Siouxfalls_facilities.xml.gz" />
	</module>
	<module name="network" >
		<param name="inputNetworkFile" value="Siouxfalls_network_PT.xml" />
	</module>
	<module name="planCalcScore" >
		<parameterset type="scoringParameters" >
			<param name="earlyDeparture" value="0.0" />
			<param name="lateArrival" value="0.0" />
			<param name="marginalUtilityOfMoney" value="0.062" />
			<param name="performing" value="0.96" />
			<param name="utilityOfLineSwitch" value="0.0" />
			<param name="waitingPt" value="-0.18" />
			<parameterset type="activityParams" >
				<param name="activityType" value="home" />
				<param name="minimalDuration" value="01:00:00" />
				<!-- typical duration of activity.  needs to be defined and non-zero.  in sec. -->
				<param name="typicalDuration" value="13:00:00" />
			</parameterset>
			<parameterset type="activityParams" >
				<param name="activityType" value="work" />
				<param name="closingTime" value="18:00:00" />
				<param name="earliestEndTime" value="17:00:00" />
				<param name="latestStartTime" value="09:00:00" />
				<param name="minimalDuration" value="08:00:00" />
				<param name="openingTime" value="08:00:00" />
				<param name="typicalDuration" value="09:00:00" />
			</parameterset>
			<parameterset type="activityParams" >
				<param name="activityType" value="secondary" />
				<param name="closingTime" value="20:00:00" />
				<param name="minimalDuration" value="00:30:00" />
				<param name="openingTime" value="08:00:00" />
				<param name="typicalDuration" value="01:00:00" />
			</parameterset>
			<parameterset type="activityParams" >
				<param name="activityType" value="car interaction" />
				<param name="typicalDuration" value="undefined" />
			</parameterset>
			<parameterset type="activityParams" >
				<param name="activityType" value="pt interaction" />
				<param name="typicalDuration" value="undefined" />
			</parameterset>
			<parameterset type="activityParams" >
				<param name="activityType" value="walk interaction" />
				<param name="typicalDuration" value="undefined" />
			</parameterset>
			<parameterset type="activityParams" >
				<param name="activityType" value="bike interaction" />
				<param name="typicalDuration" value="undefined" />
			</parameterset>
			<parameterset type="modeParams" >
				<!-- [utils] alternative-specific constant.  Normally per trip, but that is probably buggy for multi-leg trips. -->
				<param name="constant" value="-0.562" />
				<!-- [utils/hr] additional marginal utility of traveling.  normally negative.  this comes on top of the opportunity cost of time -->
				<param name="marginalUtilityOfTraveling_util_hr" value="0.0" />
				<param name="mode" value="car" />
				<!-- [unit_of_money/m] conversion of distance into money. Normally negative. -->
				<param name="monetaryDistanceRate" value="-4.0E-4" />
			</parameterset>
			<parameterset type="modeParams" >
				<param name="constant" value="-0.124" />
				<param name="marginalUtilityOfTraveling_util_hr" value="-0.18" />
				<param name="mode" value="pt" />
			</parameterset>
			<parameterset type="modeParams" >
				<param name="marginalUtilityOfTraveling_util_hr" value="-1.14" />
				<param name="mode" value="walk" />
			</parameterset>
			<parameterset type="modeParams" >
				<param name="marginalUtilityOfTraveling_util_hr" value="-1.14" />
				<param name="mode" value="bike" />
			</parameterset>
		</parameterset>
	</module>
	<module name="plans" >
		<param name="inputPlansFile" value="Siouxfalls_population.xml.gz" />
	</module>
	<module name="planscalcroute" >
		<parameterset type="teleportedModeParameters" >
			<param name="mode" value="bike" />
		</parameterset>
		<parameterset type="teleportedModeParameters" >
			<param name="mode" value="walk" />
		</parameterset>
		<parameterset type="teleportedModeParameters" >
			<param name="mode" value="non_network_walk" />
		</parameterset>
		<parameterset type="teleportedModeParameters" >
			<param name="mode" value="ride" />
		</parameterset>
		<parameterset type="teleportedModeParameters" >
			<param name="mode" value="pt" />
		</parameterset>
	</module>
	<module name="qsim" >
		<param name="endTime" value="30:00:00" />
		<param name="snapshotperiod" value="00:00:01" />
		<param name="startTime" value="00:00:00" />
		<!-- time in seconds.  Time after which the frontmost vehicle on a link is called `stuck' if it does not move. -->
		<param name="stuckTime" value="3600.0" />
	</module>
	<module name="strategy" >
		<!-- maximum number of plans per agent.  ``0'' means ``infinity''.  Currently (2010), ``5'' is a good number -->
		<param name="maxAgentPlanMemorySize" value="1" />
		<!-- strategyName of PlanSelector for plans removal.  Possible defaults: WorstPlanSelector SelectRandom SelectExpBetaForRemoval ChangeExpBetaForRemoval PathSizeLogitSelectorForRemoval . The current default, WorstPlanSelector is not a good choice from a discrete choice theoretical perspective. Alternatives, however, have not been systematically tested. kai, feb'12 -->
		<param name="planSelectorForRemoval" value="NonSelectedPlanSelector" />
		<parameterset type="strategysettings" >
			<!-- strategyName of strategy.  Possible default names: SelectRandom BestScore KeepLastSelected ChangeExpBeta SelectExpBeta SelectPathSizeLogit      (selectors), ReRouteTimeAllocationMutatorTimeAllocationMutator_ReRouteChangeSingleTripModeChangeTripModeSubtourModeChoice (innovative strategies). -->
			<param name="strategyName" value="DiscreteModeChoice" />
			<!-- weight of a strategy: for each agent, a strategy will be selected with a probability proportional to its weight -->
			<param name="weight" value="0.1" />
		</parameterset>
		<parameterset type="strategysettings" >
			<param name="strategyName" value="KeepLastSelected" />
			<param name="weight" value="0.9" />
		</parameterset>
	</module>
	<module name="subtourModeChoice" >
		<!-- Defines the chain-based modes, seperated by commas -->
		<param name="chainBasedModes" value="car" />
		<!-- Defines whether car availability must be considered or not. A agent has no car only if it has no license, or never access to a car -->
		<param name="considerCarAvailability" value="true" />
		<!-- Defines all the modes available, including chain-based modes, seperated by commas -->
		<param name="modes" value="car,pt,walk" />
	</module>
	<module name="swissRailRaptor" >
		<!-- Sets whether intermodal access and egress modes are selected by least cost (default) or randomly chosen out of the available access / egress modes. -->
		<param name="intermodalAccessEgressModeSelection" value="CalcLeastCostModePerStop" />
		<!-- Possible values: Default, Individual -->
		<param name="scoringParameters" value="Default" />
		<param name="transferPenaltyBaseCost" value="0.0" />
		<param name="transferPenaltyCostPerTravelTimeHour" value="0.0" />
		<param name="transferPenaltyMaxCost" value="Infinity" />
		<param name="transferPenaltyMinCost" value="-Infinity" />
		<!-- time deducted from transfer walk leg during transfers between pt legs in order to avoid missing a vehicle by a few seconds due to delays. -->
		<param name="transferWalkMargin" value="5.0" />
		<!-- If true, SwissRailRaptor tries to detect when agents cannot board a vehicle in the previous iteration because it is already full and tries to find an alternative route instead. -->
		<param name="useCapacityConstraints" value="false" />
		<param name="useIntermodalAccessEgress" value="false" />
		<param name="useModeMappingForPassengers" value="false" />
		<param name="useRangeQuery" value="false" />
	</module>
	<module name="transit" >
		<!-- Comma-separated list of transportation modes that are handled as transit. Defaults to 'pt'. -->
		<param name="transitModes" value="pt,bus" />
		<!-- Input file containing the transit schedule to be simulated. -->
		<param name="transitScheduleFile" value="Siouxfalls_transitSchedule.xml" />
		<!-- Set this parameter to true if transit should be simulated, false if not. -->
		<param name="useTransit" value="true" />
		<!-- Input file containing the vehicles used by the departures in the transit schedule. -->
		<param name="vehiclesFile" value="Siouxfalls_vehicles.xml" />
	</module>
	<module name="transitRouter" >
		<!-- step size to increase searchRadius if no stops are found -->
		<param name="extensionRadius" value="500.0" />
		<!-- maximum beeline distance between stops that agents could transfer to by walking -->
		<param name="maxBeelineWalkConnectionDistance" value="300.0" />
		<!-- the radius in which stop locations are searched, given a start or target coordinate -->
		<param name="searchRadius" value="1500.0" />
	</module>

</config>
